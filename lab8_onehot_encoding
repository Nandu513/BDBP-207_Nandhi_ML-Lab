import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
import csv


def grab_col_names(dataframe, cat_th=10, car_th=20):
    # cat_cols, cat_but_car
    cat_cols= [col for col in dataframe.columns if dataframe[col].dtypes == 'O' and col != 'diagnosis']
    num_but_cat = [col for col in dataframe.columns if dataframe[col].dtypes != 'O' and
                   dataframe[col].nunique() < cat_th]
    cat_but_car = [col for col in dataframe.columns if dataframe[col].dtypes == 'O' and
                   dataframe[col].nunique() > car_th]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]


    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != 'O']
    num_cols = [col for col in num_cols if col not in num_but_cat ]

    print(f"Observations: {dataframe.shape[0]}")
    print(f"Variables: {dataframe.shape[1]}")
    print(f"cat_cols: {len(cat_cols)}")
    print(f"num_cols: {len(num_cols)}")
    print(f"cat_but_car: {len(cat_but_car)}")
    print(f"num_but_cat: {len(num_but_cat)}")
    return cat_cols, num_cols, cat_but_car

def one_hot_encoder(dataframe, categorical_cols, ):
    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dtype=int,sparse=False, dummy_na=False)
    return dataframe

# def one_hot_encoder(dataframe, categorical_cols):
#     encoder = OneHotEncoder(dtype=int, sparse_output=False)
#     encoded_data = encoder.fit_transform(dataframe[categorical_cols])
#
#     encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_cols))
#
#     dataframe = dataframe.drop(categorical_cols, axis=1)
#     dataframe = pd.concat([dataframe, encoded_df], axis=1)
#
#     return dataframe

def load_data(file):
    original_df=pd.read_csv(file)
    df=original_df.copy()
    df.drop(["Unnamed: 0"], axis=1, inplace=True)
    # pd.set_option('display.max_rows', None)
    # pd.set_option('display.max_columns', None)
    print(df.head())
    print(df.shape)

    cat_cols, num_cols, cat_but_car = grab_col_names(df)
    print(cat_cols)

    print("Shape before encoding: ",df.shape)

    df=one_hot_encoder(df,cat_cols)
    print("Shape after encoding: ",df.shape)
    # pd.set_option('display.max_columns', None)
    print(df.head())

    data = df.values.tolist()  # Convert DataFrame to a list of lists
    headers = df.columns.tolist()  # Get the column headers

    with open('new_data.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)  # Write the headers first
        writer.writerows(data)
        print("done")

    # diagnosis_map = {'B': 0, 'M': 1}
    # df['diagnosis'] = df['diagnosis'].map(diagnosis_map)


    return df


def split_data(file):
    data=load_data(file)
    no_folds=int(input("Enter no of folds you want to split the data into: "))
    rand_data=data.sample(frac=1,random_state=99)
    each_fold=rand_data.shape[0]//no_folds
    split_copy=rand_data.copy()
    i=0
    fold=[]

    while i<no_folds:
        if i==no_folds-1:
            fold.append(split_copy)
            break
        temp_fold=split_copy.iloc[:each_fold,:]
        split_copy.drop(index=split_copy.index[:each_fold],axis=0,inplace=True)
        fold.append(temp_fold)

        i+=1

    # for i in fold:
    #     print(i.shape)
    # print(len(fold))

    return fold,no_folds

def model_for_k_fold(file):
    fold,no_folds=split_data(file)
    scores=[]
    for i in range(no_folds):
        x_test=fold[i].drop(['id','diagnosis'],axis=1)
        y_test=fold[i]['diagnosis']

        train_folds=[j for j in fold if not j.equals(fold[i])]
        train=pd.concat(train_folds)
        # print(train.shape)

        x_train=train.drop(['id','diagnosis'],axis=1)
        y_train=train['diagnosis']

        sc = StandardScaler()
        x_train_scaler = sc.fit_transform(x_train)
        x_test_scaler = sc.transform(x_test)

        lr_model = LogisticRegression()
        lr_model.fit(x_train_scaler, y_train)

        y_pred_lr = lr_model.predict(x_test_scaler)
        score = accuracy_score(y_test, y_pred_lr)
        scores.append(score)
        # print('Accuracy score: {}'.format(score))

    print(scores)
    return scores

def main():
    df="/home/ibab/Downloads/data_new_copied.csv"
    scores=model_for_k_fold(df)
    print("MEAN_SCORE: ", np.mean(scores))
    print("STD: ",np.std(scores))

if __name__ == "__main__" :
    main()
